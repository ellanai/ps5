---
title: "Problem Set 5"
author: "Evy Lanai & Alberto Saldarriaga"
date: "November 9, 2024"
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
output:
  echo: false
  eval: false
---

**Due 11/9 at 5:00PM Central. Worth 100 points + 10 points extra credit.**

## Submission Steps (10 pts)
1. This problem set is a paired problem set.
2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.
    - Partner 1: Evy Lanai, ellanai
    - Partner 2: Alberto Saldarriaga, asaldarriagav
3. Partner 1 will accept the `ps5` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. 
4. "This submission is our work alone and complies with the 30538 integrity policy." Add your initials to indicate your agreement: \*\*EL\*\* \*\*AS\*\*
5. "I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**"  (1 point)
6. Late coins used this pset: \*\*1\*\* Late coins left after submission: \*\*1\*\*
7. Knit your `ps5.qmd` to an PDF file to make `ps5.pdf`, 
    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. 
8. (Partner 1): push  `ps5.qmd` and `ps5.pdf` to your github repo.
9. (Partner 1): submit `ps5.pdf` via Gradescope. Add your partner on Gradescope.
10. (Partner 1): tag your submission in Gradescope

\newpage

```{python}
import pandas as pd
import altair as alt
import time

import warnings 
warnings.filterwarnings('ignore')
alt.renderers.enable("png")
```


## Step 1: Develop initial scraper and crawler

### 1. Scraping (PARTNER 1)

```{python}
import requests
from bs4 import BeautifulSoup
```

  ```{python}
url = 'https://oig.hhs.gov/fraud/enforcement/'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')
# Test to make sure it looks right
soup.text[0:50]
  ```

```{python}
# Extract the title of the enforcement action
tag = soup.find_all('a')
titles = list(filter(lambda tag: tag.get('href') and '/fraud/enforcement/' in tag['href'], soup.find_all('a')))
# There were 3 items pulled in that I don't want, so I'm taking them out
titles = titles[3: ]

# Extract the date of the enforcement action
date_divs = soup.find_all('div', class_='font-body-sm margin-top-1')
dates = [div.find('span', class_='text-base-dark padding-right-105').text for div in date_divs if div.find('span', class_='text-base-dark padding-right-105')]

# Extract the category of the enforcement action
date_divs = soup.find_all('div', class_='font-body-sm margin-top-1')
categories = [div.find('li').text for div in date_divs if div.find('li')]

# Extract the link associated with the enforcement action
links = [tag['href'] for tag in titles]
# Add domain
links = ['https://oig.hhs.gov' + link for link in links]
print(links[0])
```

```{python}
# Make a data frame
enforcement_action_df = pd.DataFrame({
  "Title": titles,
  "Date": dates,
  "Category": categories,
  "Link": links
})
print(enforcement_action_df.head())
```

### 2. Crawling (PARTNER 1)

```{python}
url = "https://oig.hhs.gov/fraud/enforcement/macomb-county-doctor-and-pharmacist-agree-to-pay-700948-to-settle-false-claims-act-allegations/"
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

li_tags = soup.find_all('li')
for li in li_tags:
    if 'Agency:' in li.get_text():
        # Extract text after "Agency:"
        agency = li.get_text().split('Agency:')[-1].strip()  
        agencies.append(agency)
```

```{python}
# Create a for loop to extract agency from each link in list
agencies = []

for link in links:
    response = requests.get(link)
    soup = BeautifulSoup(response.text, 'html.parser')

    li_tags = soup.find_all('li')
    for li in li_tags:
      if 'Agency:' in li.get_text():
          # Extract text after "Agency:"
          agency = li.get_text().split('Agency:')[-1].strip()  
          agencies.append(agency)

# Update data frame
enforcement_action_df["Agency"] = agencies
print(enforcement_action_df.head())
```

## Step 2: Making the scraper dynamic

### 1. Turning the scraper into a function 

* a. Pseudo-Code (PARTNER 2)


* b. Create Dynamic Scraper (PARTNER 2)

```{python}

```

* c. Test Partner's Code (PARTNER 1)

```{python}

```

## Step 3: Plot data based on scraped data

### 1. Plot the number of enforcement actions over time (PARTNER 2)

```{python}

```

### 2. Plot the number of enforcement actions categorized: (PARTNER 1)

* based on "Criminal and Civil Actions" vs. "State Enforcement Agencies"

```{python}

```

* based on five topics

```{python}

```

## Step 4: Create maps of enforcement activity

### 1. Map by State (PARTNER 1)

```{python}

```


### 2. Map by District (PARTNER 2)

```{python}

```

## Extra Credit

### 1. Merge zip code shapefile with population
```{python}

```

### 2. Conduct spatial join
```{python}

```

### 3. Map the action ratio in each district
```{python}

```